load parse-util .

--- Commands to simplify meta-level commands usage

mod am7ll is
    protecting META-LEVEL * (op _+_ to _++_, op _,_ to _._, op [_] to :_:, op empty to null ) .
    protecting PARSE-UTIL .

	--- Disambiguation commands for each kind of usage:

    --- This one is used for meta-reduce equations
    op > <_> : SSequente -> String .
    
    --- This second, used for meta-rewrites simple REGRAS, which only needs one substitution
    op >> _ <_> <_;_> : Qid SSequente Contexto Contexto -> String .

    --- A little similar from the last one, but this one dont take two parameters. Its used
    --- to meta reduce bang, question mark and copyng rules, which only need one parameters
    op >- _ <_> <_> : Qid SSequente Contexto -> String .

    --- The last command, is used for rewrite complexe REGRAS, 'tensor right' and 'or multiplicative'
    --- which they need four substitutions
    op >>> _ <_> <_;_;_;_> : Qid SSequente Contexto Contexto Contexto Contexto -> String .
    
    --- These commands are implemented here. They are basically a simply command, with no verbose sintaxe,
    --- to do all the meta-level operation with replacements
    eq > < sequente:SSequente > =
        ParseSequente(downTerm(getTerm(metaReduce(upModule('am7ll, false), upTerm(sequente:SSequente))), error)) .

    eq >> regra:Qid < sequente:SSequente > < f:Contexto ; g:Contexto > =
        ParseSequente(downTerm( getTerm( metaXapply( upModule( 'am7ll, false), upTerm(sequente:SSequente), 
        regra:Qid, 'F:Formula <- upTerm(f:Contexto) ; 'G:Formula <- upTerm(g:Contexto),
        0, unbounded, 0)), error)) .

    eq >- regra:Qid < sequente:SSequente > < f:Contexto > =
    	ParseSequente(downTerm( getTerm( metaXapply( upModule( 'am7ll, false), upTerm(sequente:SSequente), 
        regra:Qid, 'F:Formula <- upTerm(f:Contexto),
        0, unbounded, 0)), error)) .

    eq >>> regra:Qid < sequente:SSequente > < c:Contexto ; d:Contexto ; w:Contexto ; z:Contexto > =
        ParseSequente(downTerm( getTerm( metaXapply ( upModule ('am7ll, false), upTerm(sequente:SSequente),
        regra:Qid, 'C:Contexto <- upTerm(c:Contexto) ; 'D:Contexto <- upTerm(d:Contexto) ;
        'W:Contexto <- upTerm(w:Contexto) ; 'Z:Contexto <- upTerm(z:Contexto),
        0, unbounded, 0)), error)) .
            
endm

eof

red > < [p] ; {! p} |-- [q] ; {r} > . 
red > < [p] ; {p + q} |-- [q] ; {a + t} > . 
red > < [empty] ; {p} |-- [empty] ; {p + q} > .
red > < [t] ; {p, q} |-- [u] ; {t x a, b, c} > .
red > < [p] ; {! p} |-- [empty] ; {(((a 8 b) + c) + (q 8 p)) 8 (p + (q 8 r))} > .

red >> 'OrAddR2 < [p] ; {q} |-- [r] ; {s + t, u + t} > < s ; t > .
red >> 'AndAddL1 < [empty] ; {q, r ; s, t + u, r ; q} |-- [empty] ; {a} > < r ; q > .
red >> 'AndAddL1 < [empty] ; {q, r ; s, t + u, r ; s} |-- [empty] ; {a} > < r ; s > .
red >> 'AndAddL2 < [empty] ; {q, r ; s, t + u, r ; s} |-- [empty] ; {a} > < r ; s > .

red >- 'cpyL < [p, q] ; {p, r} |-- [t] ; {u} > < q > .
red >- 'cpyL < [p, q] ; {p, r} |-- [t] ; {u} > < p > .
red >- 'cpyR < [p, q] ; {p, r} |-- [t] ; {u} > < t > .
red >- 'Bang < [p] ; {? a} |-- [r] ; {empty} > < a > .
red >- 'cpyR < [p, q] ; {p, r} |-- [t] ; {u, t} > < t > .
red >- 'Question < [p] ; {empty} |-- [r] ; { ! a} > < a > .
red >- 'storeL < [p] ; {! a, q} |-- [r] ; {empty} > < a > .
red >- 'storeR < [p] ; {! a, q} |-- [r, t] ; {? q , ? r} > < r > .

red >>> 'TensorR < [t] ; {p, q} |-- [u] ; {t x a, b, c} > < p ; q ; c ; b > .
red >>> 'TensorR < [t] ; {p, q} |-- [u] ; {t x a, b, c} > < p ; q ; b ; c > .
red >>> 'TensorR < [t] ; {p, q} |-- [u] ; {t x a, b, c} > < q ; p ; c ; b > .
red >>> 'TensorR < [t] ; {p, q} |-- [u] ; {t x a, (b + t), ( c + b)} > < q ; p ; (b + t) ; (c + b) > .
red >>> 'TensorR < [t] ; {p, (q 8 p)} |-- [u] ; {t x (a + ! (b x p)), b, ~ c} > < (q 8 p) ; p ; b ; ~ c > . 